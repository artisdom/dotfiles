#!/bin/bash
#All my custom BASH functions

function gfind {
  awk "/#\[$1-start\]/,/#\[$1-end\]/ { print }" ~/.dotfiles/bash/aliases
}

function grab {
  git checkout $1 -- $2
}

function filepath {
  git log -p --follow -- $1
}

function ip {
  YELLOW="\033[33m"
  IP=$(ifconfig | grep 'inet 1' | cut -c 6- | awk 'NR==2 {print $1}')
  echo -e ${YELLOW}$IP
  echo $IP | pbcopy
}

function logs {
  git log -p --grep $1
}

function move_dock {
  if [ "$1" = "left" ]; then
    defaults write com.apple.dock pinning -string start && killall Dock
  fi
  if [ "$1" = "right" ]; then
    defaults write com.apple.dock pinning -string end && killall Dock
  fi
  if [ "$1" = "middle" ]; then
    defaults write com.apple.dock pinning -string middle && killall Dock
  fi
}

function vhost {
  sudo ~/.dotfiles/osx/mamp_vh.sh $1
}

function al {
 awk "/#\[$1\]/,/#\[end\]/ { print }" ~/.dotfiles/bash/aliases | cut -c 7-
}

function hack {
  for file in /Applications/MAMP/Library/vhosts/domains/*
  do
    if [ -f "$file" ];then
     echo -e "${YELLOW}${file##/*/}${NC}"
    fi
  done
}

function hg {
  history | grep --color=auto $1
}

# function parse_git_branch {
#   git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ \[\1\]/'
# }

# function proml {
#   local        BLUE="\[\033[0;34m\]"
#   local     DEFAULT="\[\033[0m\]"
#   local		CYAN="\e[36m"
#   local		RED="\e[31m"
#   local 	 BLACK="\e[30m"
#   local    GREEN="\e[32m"
#   local    YELLOW="\e[33m"
#   local    BLUE="\e[34m"
#   local    MAGENTA="\e[35m"
#   local    WHITE="\e[37m"

# PS1="$DEFAULT\u: $DEFAULT\w $YELLOW\$(parse_git_branch) \n‚ö° $DEFAULT"
# }
# proml

# #‚áí ‚û• ‚áæ ‚áÄ ‚û§ ‚ùñ ‚òÖ ‚ûî üîÖüí©üöÄ‚ö°

function sb_init {
  local RED="\033[0;31m"
  local NC="\033[0m"

  if [ ! $# = 1 ]; then
    echo -e "${RED}Please specify a project name, or action (update, revert).${NC}"
    echo -e "Usage: init project-name / action\n"
  fi
  if [ "$1" = "--update" ]; then
    local name=$(node -e "console.log(require('./package.json').name)");
    mv package.json package.bak.json;
    mv node_modules node_modules_bak;
    curl -sSOL http://raw.github.com/sparkbox/project-init/master/package.json;
    sed -i.tmp "s/Project-Name/$name/g" package.json;
    rm package.json.tmp;
    npm install;
  fi
  if [ "$1" = "--revert" ]; then
    if [ -e node_modules_bak -a -e package.bak.json ]; then
      rm -r node_modules;
      rm package.json;
      mv node_modules_bak node_modules;
      mv package.bak.json package.json;
    fi
  else
    echo -e "${RED}Downloading project-init${NC} üöÄ\n"
    curl -s -S -O -L http://github.com/sparkbox/project-init/archive/master.zip;
    echo -e "${RED}Download finished.${NC}\n"
    echo -e "${RED}Setting up project config files.${NC}\n"
    unzip -qq master.zip;
    rm master.zip;
    mv project-init-master $1
    sed -i.bak "s/Project-Name/$1/g" $1/package.json;
    rm $1/package.json.bak;
    sed -i.bak "s/Project-Name/$1/g" $1/.rvmrc;
    rm $1/.rvmrc.bak;
    cd $1
    npm install;
    bundle;
    echo -e "${RED}Your project is all ready to go. Enjoy${NC}\n"
  fi
}